#!/usr/bin/env bash

# check dependencies
if ! command -v xcodebuild >/dev/null 2>&1; then
  echo "xcoverage needs xcodebuild to build coverage files"
  exit 1
fi

if ! command -v gcov >/dev/null 2>&1; then
  echo "xcoverage needs gcov to analyse coverage files"
  exit 1
fi

xcpretty_available=0

if command -v xcpretty >/dev/null 2>&1; then
  xcpretty_available=1
fi

command_name="$(basename $0)"

# xcoverage will put all build files, including derived data,
# in the $build_directory. The $build_directory will be created in the
# path xcoverage was called in
build_directory="$command_name-build"
derived_data_directory="$build_directory/derived-data"

function delete_build_directory() {
  if [[ -d "$build_directory" ]]; then
    rm -rf "$build_directory"
  fi
}

function print_usage_message() {
  echo -e "Usage: $command_name [OPTIONS]\n"
  echo -e "Options:"
  echo -e "\t-help\t\t\t\tShow help"
  echo -e "\t-project PATH\t\t\tPath to project"
  echo -e "\t-target TARGET\t\t\tTarget to use for coverage analysis"
  echo -e "\t-scheme NAME\t\t\tScheme to use for building"
  echo -e "\t-destination DESTINATION\tUse the destination described by" \
          "DESTINATION (a comma-separated set of key-value pairs describing" \
          "the destination to use)"
  echo -e "\t-sdk VERSION\t\t\tSDK to use for building (e.g. 8.0, 8.1)"
  echo -e "\t-configuration NAME\t\tConfiguration to use (e.g. Debug, Release)"
  echo -e "\t-clean\t\t\t\tDelete build directory ($build_directory)"
}

# parse arguments
while [[ $# > 0 ]]; do
  case "$1" in
    -project)
      if [[ -z "$2" ]]; then
        echo -e "Missing PATH after ${1}\n"
        print_usage_message
        exit 1
      fi

      project="${2}"
      project_argument="${1} ${2}"
      shift
      ;;
    -target)
      if [[ -z "$2" ]]; then
        echo -e "Missing TARGET after ${1}\n"
        print_usage_message
        exit 1
      fi

      target="${2}"
      target_argument="${1} ${2}"
      shift
      ;;
    -scheme)
      if [[ -z "$2" ]]; then
        echo -e "Missing NAME after ${1}\n"
        print_usage_message
        exit 1
      fi

      scheme="${2}"
      scheme_argument="${1} ${2}"
      shift
      ;;
    -destination)
      if [[ -z "$2" ]]; then
        echo -e "Missing DESTINATION after ${1}\n"
        print_usage_message
        exit 1
      fi

      destination="${2}"
      destination_argument="${1} ${2}"
      shift
      ;;
    -sdk)
      if [[ -z "$2" ]]; then
        echo -e "Missing VERSION after ${1}\n"
        print_usage_message
        exit 1
      fi

      sdk="${2}"
      sdk_argument="${1} ${2}"
      shift
      ;;
    -configuration)
      if [[ -z "$2" ]]; then
        echo -e "Missing NAME after ${1}\n"
        print_usage_message
        exit 1
      fi

      configuration="${2}"
      configuration_argument="${1} ${2}"
      shift
      ;;
    -clean)
      delete_build_directory
      exit 0
      ;;
    -help)
      print_usage_message
      exit 0
      ;;
    *)
      echo -e "Unknown option ${1}\n"
      print_usage_message
      exit 1
      ;;
  esac

shift
done

if [[ -z "$project" ]]; then
  projects=$(find . -maxdepth 1 -name '*.xcodeproj' -type d)
  project_count=$(echo $projects | wc -l)

  # if there is more than 1 xcodeproj in the current directory,
  # xcoverage doesn't know which one to choose
  if [[ $project_count -ne 1 ]]; then
    echo -e "Please specify a path to a project with \"-project PATH\""
    exit 1
  else
    # use sed to remove the "./" prefix,
    # because basename doesn't work when filename contains spaces
    project=$(echo $projects | sed -E 's/^.{2}//')
    # get project name by removing ".xcodeproj" suffix
    project_name=$(echo $project | sed 's/\.xcodeproj//')
    project_argument="-project ${project}"
  fi
fi

if [[ -z "$scheme" ]]; then
  echo -e "Please specify a scheme with \"-scheme NAME\""
  exit 1
fi

if [[ -z "$target" ]]; then
  echo -e "Please specify a target with \"-target TARGET\""
  exit 1
fi

if [[ (-z "$sdk") && (-z "$destination") ]]; then
  echo -e "$command_name: Neither -sdk nor -destination specified"
  echo -e "$command_name: Using \"-sdk iphonesimulator8.1\""
  sdk="iphonesimulator8.1"
  sdk_argument="-sdk ${sdk}"
fi

if [[ -z "$configuration" ]]; then
  echo -e "$command_name: No configuration specified"
  echo -e "$command_name: Using \"-configuration Debug\""
  configuration="Debug"
  configuration_argument="-configuration ${configuration}"
fi

# delete old build directory
delete_build_directory

# create new build directory
mkdir "$build_directory"

# call xcodebuild test with the specified arguments
function xcodebuild_test() {
  xcodebuild test \
  $project_argument \
  $scheme_argument \
  $destination_argument \
  $sdk_argument \
  $configuration_argument \
  -derivedDataPath $derived_data_directory \
  GCC_GENERATE_DEBUGGING_SYMBOLS=YES \
  GCC_GENERATE_TEST_COVERAGE_FILES=YES \
  GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=YES
}

if [[ $xcpretty_available -ne 0 ]]; then
  xcodebuild_test | xcpretty -c
else
  xcodebuild_test
fi

coverage_files_directory="${derived_data_directory}/Build/Intermediates/\
${project_name}.build/\
${configuration}-iphonesimulator/\
${target}.build/Objects-normal/i386"
